//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tys361.WCF.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBContextEntities : DbContext
    {
        public DBContextEntities()
            : base("name=DBContextEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AccessControl> AccessControls { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BadgeSelection> BadgeSelections { get; set; }
        public virtual DbSet<BadgeType> BadgeTypes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<ClassMaster> ClassMasters { get; set; }
        public virtual DbSet<ClassMaterial> ClassMaterials { get; set; }
        public virtual DbSet<ClassType> ClassTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountryMaster> CountryMasters { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<DurationType> DurationTypes { get; set; }
        public virtual DbSet<Enquiry> Enquiries { get; set; }
        public virtual DbSet<EnquiryExternal> EnquiryExternals { get; set; }
        public virtual DbSet<EnquiryType> EnquiryTypes { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<ExamCalendar> ExamCalendars { get; set; }
        public virtual DbSet<ExpertAdvise> ExpertAdvises { get; set; }
        public virtual DbSet<FAQ> FAQs { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<FeedbackQuestion> FeedbackQuestions { get; set; }
        public virtual DbSet<FreeTrialMock> FreeTrialMocks { get; set; }
        public virtual DbSet<GenerateParentLogin> GenerateParentLogins { get; set; }
        public virtual DbSet<GenerateStudentLogin> GenerateStudentLogins { get; set; }
        public virtual DbSet<Invoice_Details> Invoice_Details { get; set; }
        public virtual DbSet<JumbleType> JumbleTypes { get; set; }
        public virtual DbSet<LastMinuteRevision> LastMinuteRevisions { get; set; }
        public virtual DbSet<LectureVideo> LectureVideos { get; set; }
        public virtual DbSet<LevelMaster> LevelMasters { get; set; }
        public virtual DbSet<MatchingQstnAnswer> MatchingQstnAnswers { get; set; }
        public virtual DbSet<MatrixMatch> MatrixMatches { get; set; }
        public virtual DbSet<MCQAnswer> MCQAnswers { get; set; }
        public virtual DbSet<MCQAnswersMock> MCQAnswersMocks { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<MissedCallData> MissedCallDatas { get; set; }
        public virtual DbSet<MobileVerificationMst> MobileVerificationMsts { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<Notice> Notices { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OnDemandNote> OnDemandNotes { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<PackageSelection> PackageSelections { get; set; }
        public virtual DbSet<PackagesType> PackagesTypes { get; set; }
        public virtual DbSet<ParentDetail> ParentDetails { get; set; }
        public virtual DbSet<PreviousYear> PreviousYears { get; set; }
        public virtual DbSet<PreviousYearExamType> PreviousYearExamTypes { get; set; }
        public virtual DbSet<PreviousYearQuestion> PreviousYearQuestions { get; set; }
        public virtual DbSet<QuestionPattern> QuestionPatterns { get; set; }
        public virtual DbSet<QuestionTypeSet> QuestionTypeSets { get; set; }
        public virtual DbSet<RequestToBeTeacher> RequestToBeTeachers { get; set; }
        public virtual DbSet<RevisionTest> RevisionTests { get; set; }
        public virtual DbSet<RevisionTestAnswer> RevisionTestAnswers { get; set; }
        public virtual DbSet<RevisionType> RevisionTypes { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<ScheduleMockTest> ScheduleMockTests { get; set; }
        public virtual DbSet<SchoolMaster> SchoolMasters { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SolutionType> SolutionTypes { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<StudentCategoryMapping> StudentCategoryMappings { get; set; }
        public virtual DbSet<StudentPackageSelection> StudentPackageSelections { get; set; }
        public virtual DbSet<StudentRevisionTest> StudentRevisionTests { get; set; }
        public virtual DbSet<StudentRevisionTopic> StudentRevisionTopics { get; set; }
        public virtual DbSet<StudentTestAnswer> StudentTestAnswers { get; set; }
        public virtual DbSet<StudentTest> StudentTests { get; set; }
        public virtual DbSet<StudyMaterial> StudyMaterials { get; set; }
        public virtual DbSet<Subscription> Subscriptions { get; set; }
        public virtual DbSet<SupportComment> SupportComments { get; set; }
        public virtual DbSet<SupportTicket> SupportTickets { get; set; }
        public virtual DbSet<SupportType> SupportTypes { get; set; }
        public virtual DbSet<SyllabusMaster> SyllabusMasters { get; set; }
        public virtual DbSet<SystemDetail> SystemDetails { get; set; }
        public virtual DbSet<TaxCategory> TaxCategories { get; set; }
        public virtual DbSet<TaxRate> TaxRates { get; set; }
        public virtual DbSet<tbl_AssessmentCategory> tbl_AssessmentCategory { get; set; }
        public virtual DbSet<tbl_BackgroundMailTemplates> tbl_BackgroundMailTemplates { get; set; }
        public virtual DbSet<tbl_Branch> tbl_Branch { get; set; }
        public virtual DbSet<tbl_Client> tbl_Client { get; set; }
        public virtual DbSet<tbl_ClientCategory> tbl_ClientCategory { get; set; }
        public virtual DbSet<tbl_ClientCoordinators> tbl_ClientCoordinators { get; set; }
        public virtual DbSet<tbl_CommissionMaster> tbl_CommissionMaster { get; set; }
        public virtual DbSet<tbl_CommNameMaster> tbl_CommNameMaster { get; set; }
        public virtual DbSet<tbl_DefaultMailer> tbl_DefaultMailer { get; set; }
        public virtual DbSet<tbl_EmailLog> tbl_EmailLog { get; set; }
        public virtual DbSet<tbl_EmailTemplates> tbl_EmailTemplates { get; set; }
        public virtual DbSet<tbl_ExpenseCategory> tbl_ExpenseCategory { get; set; }
        public virtual DbSet<tbl_ExpenseNote> tbl_ExpenseNote { get; set; }
        public virtual DbSet<tbl_FeeMaster> tbl_FeeMaster { get; set; }
        public virtual DbSet<tbl_InvoiceDetails> tbl_InvoiceDetails { get; set; }
        public virtual DbSet<tbl_MailingList> tbl_MailingList { get; set; }
        public virtual DbSet<tbl_MiscFee> tbl_MiscFee { get; set; }
        public virtual DbSet<tbl_PostAgreementTemplate> tbl_PostAgreementTemplate { get; set; }
        public virtual DbSet<tbl_ProgramMaster> tbl_ProgramMaster { get; set; }
        public virtual DbSet<tbl_PromoCode> tbl_PromoCode { get; set; }
        public virtual DbSet<tbl_Reference> tbl_Reference { get; set; }
        public virtual DbSet<tbl_Refund> tbl_Refund { get; set; }
        public virtual DbSet<tbl_SMSConfig> tbl_SMSConfig { get; set; }
        public virtual DbSet<tbl_SMTPConfig> tbl_SMTPConfig { get; set; }
        public virtual DbSet<tbl_UserDetails> tbl_UserDetails { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeacherCategoryMap> TeacherCategoryMaps { get; set; }
        public virtual DbSet<TeacherExperience> TeacherExperiences { get; set; }
        public virtual DbSet<TeacherQualification> TeacherQualifications { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<Test_TestQuestionMap> Test_TestQuestionMap { get; set; }
        public virtual DbSet<TestAnalytic> TestAnalytics { get; set; }
        public virtual DbSet<TestAnswersEvaluation> TestAnswersEvaluations { get; set; }
        public virtual DbSet<TestQuestion> TestQuestions { get; set; }
        public virtual DbSet<TestQuestionMock> TestQuestionMocks { get; set; }
        public virtual DbSet<TestReminder> TestReminders { get; set; }
        public virtual DbSet<TestSolution> TestSolutions { get; set; }
        public virtual DbSet<TestTotalMark> TestTotalMarks { get; set; }
        public virtual DbSet<TestType> TestTypes { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
        public virtual DbSet<UploadedQuestEvaluation> UploadedQuestEvaluations { get; set; }
        public virtual DbSet<User_Org_Site_Maping> User_Org_Site_Maping { get; set; }
        public virtual DbSet<UserActivityLog> UserActivityLogs { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserLogDetail> UserLogDetails { get; set; }
        public virtual DbSet<UserRoleMap> UserRoleMaps { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorMaster> VendorMasters { get; set; }
        public virtual DbSet<VideoTypeMaster> VideoTypeMasters { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<ObjectiveType> ObjectiveTypes { get; set; }
        public virtual DbSet<StudentTestSchedule> StudentTestSchedules { get; set; }
        public virtual DbSet<Invoicevw> Invoicevws { get; set; }
        public virtual DbSet<OnlineCategoryWiseTestVw> OnlineCategoryWiseTestVws { get; set; }
        public virtual DbSet<PackageStudentSelection_view> PackageStudentSelection_view { get; set; }
        public virtual DbSet<PostAgreementTempView> PostAgreementTempViews { get; set; }
        public virtual DbSet<RecentTest> RecentTests { get; set; }
        public virtual DbSet<RecentTestsView> RecentTestsViews { get; set; }
        public virtual DbSet<StudentMockTestScheduleView> StudentMockTestScheduleViews { get; set; }
        public virtual DbSet<StudentTestAnswerVw> StudentTestAnswerVws { get; set; }
        public virtual DbSet<StudentTestScheduleView> StudentTestScheduleViews { get; set; }
        public virtual DbSet<StudentTestScheduleVw> StudentTestScheduleVws { get; set; }
        public virtual DbSet<TestQuestionsMockView> TestQuestionsMockViews { get; set; }
        public virtual DbSet<TestQuestionsVw> TestQuestionsVws { get; set; }
        public virtual DbSet<TestVw> TestVws { get; set; }
        public virtual DbSet<TopicSubjectVw> TopicSubjectVws { get; set; }
        public virtual DbSet<TotalQuestionAnswersVw> TotalQuestionAnswersVws { get; set; }
        public virtual DbSet<UserDetailsVW> UserDetailsVWs { get; set; }
        public virtual DbSet<vw_ClientCoordinators> vw_ClientCoordinators { get; set; }
        public virtual DbSet<vw_ClientList> vw_ClientList { get; set; }
        public virtual DbSet<vw_clientMail> vw_clientMail { get; set; }
        public virtual DbSet<vw_CommMaster> vw_CommMaster { get; set; }
        public virtual DbSet<vw_DefaultMailer> vw_DefaultMailer { get; set; }
        public virtual DbSet<vw_ExpenseNote> vw_ExpenseNote { get; set; }
        public virtual DbSet<vw_InvoiceDetails> vw_InvoiceDetails { get; set; }
        public virtual DbSet<vw_MailConfig> vw_MailConfig { get; set; }
        public virtual DbSet<vw_MiscFee> vw_MiscFee { get; set; }
        public virtual DbSet<vw_ProgramFee_New> vw_ProgramFee_New { get; set; }
        public virtual DbSet<vw_ProgramFeeMaster> vw_ProgramFeeMaster { get; set; }
        public virtual DbSet<vw_Reference> vw_Reference { get; set; }
        public virtual DbSet<vw_Refund> vw_Refund { get; set; }
        public virtual DbSet<vw_RefundClient> vw_RefundClient { get; set; }
        public virtual DbSet<vw_SupportTicketView> vw_SupportTicketView { get; set; }
        public virtual DbSet<vw_UserInfo> vw_UserInfo { get; set; }
    
        public virtual int sp_BadgeType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_BadgeType");
        }
    
        public virtual int sp_CommissionMaster(Nullable<int> iD, string cOMM_ID, string tYPE, string cOMM_FROM, string cOMM_TO, string aMOUNT, string aCTION)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cOMM_IDParameter = cOMM_ID != null ?
                new ObjectParameter("COMM_ID", cOMM_ID) :
                new ObjectParameter("COMM_ID", typeof(string));
    
            var tYPEParameter = tYPE != null ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(string));
    
            var cOMM_FROMParameter = cOMM_FROM != null ?
                new ObjectParameter("COMM_FROM", cOMM_FROM) :
                new ObjectParameter("COMM_FROM", typeof(string));
    
            var cOMM_TOParameter = cOMM_TO != null ?
                new ObjectParameter("COMM_TO", cOMM_TO) :
                new ObjectParameter("COMM_TO", typeof(string));
    
            var aMOUNTParameter = aMOUNT != null ?
                new ObjectParameter("AMOUNT", aMOUNT) :
                new ObjectParameter("AMOUNT", typeof(string));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CommissionMaster", iDParameter, cOMM_IDParameter, tYPEParameter, cOMM_FROMParameter, cOMM_TOParameter, aMOUNTParameter, aCTIONParameter);
        }
    
        public virtual int sp_CommNameMaster(Nullable<int> iD, string cOMM_CODE, string cOMM_NAME, Nullable<bool> sTATUS, string aCTION)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cOMM_CODEParameter = cOMM_CODE != null ?
                new ObjectParameter("COMM_CODE", cOMM_CODE) :
                new ObjectParameter("COMM_CODE", typeof(string));
    
            var cOMM_NAMEParameter = cOMM_NAME != null ?
                new ObjectParameter("COMM_NAME", cOMM_NAME) :
                new ObjectParameter("COMM_NAME", typeof(string));
    
            var sTATUSParameter = sTATUS.HasValue ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(bool));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CommNameMaster", iDParameter, cOMM_CODEParameter, cOMM_NAMEParameter, sTATUSParameter, aCTIONParameter);
        }
    
        public virtual int sp_ExpenseCategories(string eXP_CATEGORY, Nullable<bool> sTATUS, string eXP_CODE, string aCTION)
        {
            var eXP_CATEGORYParameter = eXP_CATEGORY != null ?
                new ObjectParameter("EXP_CATEGORY", eXP_CATEGORY) :
                new ObjectParameter("EXP_CATEGORY", typeof(string));
    
            var sTATUSParameter = sTATUS.HasValue ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(bool));
    
            var eXP_CODEParameter = eXP_CODE != null ?
                new ObjectParameter("EXP_CODE", eXP_CODE) :
                new ObjectParameter("EXP_CODE", typeof(string));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExpenseCategories", eXP_CATEGORYParameter, sTATUSParameter, eXP_CODEParameter, aCTIONParameter);
        }
    
        public virtual int sp_ExpenseNote(Nullable<long> iD, string eXP_CODE, string dATE, string aMOUNT, string pAY_MODE, string bANK_NAME, string tRAN_NO, string rEF_CLIENT, string pAID_BY, string eNT_DATE, string eNT_BY, string lAST_UPDATE, string uPDATED_BY, string pAID_TO, string rEMARKS, string aCTION, Nullable<bool> sTATUS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var eXP_CODEParameter = eXP_CODE != null ?
                new ObjectParameter("EXP_CODE", eXP_CODE) :
                new ObjectParameter("EXP_CODE", typeof(string));
    
            var dATEParameter = dATE != null ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(string));
    
            var aMOUNTParameter = aMOUNT != null ?
                new ObjectParameter("AMOUNT", aMOUNT) :
                new ObjectParameter("AMOUNT", typeof(string));
    
            var pAY_MODEParameter = pAY_MODE != null ?
                new ObjectParameter("PAY_MODE", pAY_MODE) :
                new ObjectParameter("PAY_MODE", typeof(string));
    
            var bANK_NAMEParameter = bANK_NAME != null ?
                new ObjectParameter("BANK_NAME", bANK_NAME) :
                new ObjectParameter("BANK_NAME", typeof(string));
    
            var tRAN_NOParameter = tRAN_NO != null ?
                new ObjectParameter("TRAN_NO", tRAN_NO) :
                new ObjectParameter("TRAN_NO", typeof(string));
    
            var rEF_CLIENTParameter = rEF_CLIENT != null ?
                new ObjectParameter("REF_CLIENT", rEF_CLIENT) :
                new ObjectParameter("REF_CLIENT", typeof(string));
    
            var pAID_BYParameter = pAID_BY != null ?
                new ObjectParameter("PAID_BY", pAID_BY) :
                new ObjectParameter("PAID_BY", typeof(string));
    
            var eNT_DATEParameter = eNT_DATE != null ?
                new ObjectParameter("ENT_DATE", eNT_DATE) :
                new ObjectParameter("ENT_DATE", typeof(string));
    
            var eNT_BYParameter = eNT_BY != null ?
                new ObjectParameter("ENT_BY", eNT_BY) :
                new ObjectParameter("ENT_BY", typeof(string));
    
            var lAST_UPDATEParameter = lAST_UPDATE != null ?
                new ObjectParameter("LAST_UPDATE", lAST_UPDATE) :
                new ObjectParameter("LAST_UPDATE", typeof(string));
    
            var uPDATED_BYParameter = uPDATED_BY != null ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(string));
    
            var pAID_TOParameter = pAID_TO != null ?
                new ObjectParameter("PAID_TO", pAID_TO) :
                new ObjectParameter("PAID_TO", typeof(string));
    
            var rEMARKSParameter = rEMARKS != null ?
                new ObjectParameter("REMARKS", rEMARKS) :
                new ObjectParameter("REMARKS", typeof(string));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            var sTATUSParameter = sTATUS.HasValue ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ExpenseNote", iDParameter, eXP_CODEParameter, dATEParameter, aMOUNTParameter, pAY_MODEParameter, bANK_NAMEParameter, tRAN_NOParameter, rEF_CLIENTParameter, pAID_BYParameter, eNT_DATEParameter, eNT_BYParameter, lAST_UPDATEParameter, uPDATED_BYParameter, pAID_TOParameter, rEMARKSParameter, aCTIONParameter, sTATUSParameter);
        }
    
        public virtual int sp_InvoiceDetails(Nullable<int> userId, Nullable<int> packageId, string email, string name, string mobileNumber, Nullable<decimal> amount, Nullable<int> classId, Nullable<System.DateTime> date, Nullable<bool> status, Nullable<bool> deleted, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> uPDATED_BY, Nullable<System.DateTime> updatedOn, Nullable<int> siteId, Nullable<int> orgId, string mode, string description, Nullable<bool> isApp, string aCTION)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var packageIdParameter = packageId.HasValue ?
                new ObjectParameter("PackageId", packageId) :
                new ObjectParameter("PackageId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var uPDATED_BYParameter = uPDATED_BY.HasValue ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(int));
    
            var updatedOnParameter = updatedOn.HasValue ?
                new ObjectParameter("UpdatedOn", updatedOn) :
                new ObjectParameter("UpdatedOn", typeof(System.DateTime));
    
            var siteIdParameter = siteId.HasValue ?
                new ObjectParameter("SiteId", siteId) :
                new ObjectParameter("SiteId", typeof(int));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isAppParameter = isApp.HasValue ?
                new ObjectParameter("IsApp", isApp) :
                new ObjectParameter("IsApp", typeof(bool));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InvoiceDetails", userIdParameter, packageIdParameter, emailParameter, nameParameter, mobileNumberParameter, amountParameter, classIdParameter, dateParameter, statusParameter, deletedParameter, createdByParameter, createdOnParameter, uPDATED_BYParameter, updatedOnParameter, siteIdParameter, orgIdParameter, modeParameter, descriptionParameter, isAppParameter, aCTIONParameter);
        }
    
        public virtual int sp_MailingList(Nullable<int> iD, string mAILING_LIST, string dEFAULT_SENDER, string nAME, string dOMAIN, string lAST_UPDATED, string uPDATED_BY, string path, string aCTION)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var mAILING_LISTParameter = mAILING_LIST != null ?
                new ObjectParameter("MAILING_LIST", mAILING_LIST) :
                new ObjectParameter("MAILING_LIST", typeof(string));
    
            var dEFAULT_SENDERParameter = dEFAULT_SENDER != null ?
                new ObjectParameter("DEFAULT_SENDER", dEFAULT_SENDER) :
                new ObjectParameter("DEFAULT_SENDER", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var dOMAINParameter = dOMAIN != null ?
                new ObjectParameter("DOMAIN", dOMAIN) :
                new ObjectParameter("DOMAIN", typeof(string));
    
            var lAST_UPDATEDParameter = lAST_UPDATED != null ?
                new ObjectParameter("LAST_UPDATED", lAST_UPDATED) :
                new ObjectParameter("LAST_UPDATED", typeof(string));
    
            var uPDATED_BYParameter = uPDATED_BY != null ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MailingList", iDParameter, mAILING_LISTParameter, dEFAULT_SENDERParameter, nAMEParameter, dOMAINParameter, lAST_UPDATEDParameter, uPDATED_BYParameter, pathParameter, aCTIONParameter);
        }
    
        public virtual int SP_MobileVerificationMst(string mobileNo, string verificationCode, string currentDate, string sessFrom, string sessTo, Nullable<bool> isRegistered, string fullName, string email)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var currentDateParameter = currentDate != null ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(string));
    
            var sessFromParameter = sessFrom != null ?
                new ObjectParameter("SessFrom", sessFrom) :
                new ObjectParameter("SessFrom", typeof(string));
    
            var sessToParameter = sessTo != null ?
                new ObjectParameter("SessTo", sessTo) :
                new ObjectParameter("SessTo", typeof(string));
    
            var isRegisteredParameter = isRegistered.HasValue ?
                new ObjectParameter("IsRegistered", isRegistered) :
                new ObjectParameter("IsRegistered", typeof(bool));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MobileVerificationMst", mobileNoParameter, verificationCodeParameter, currentDateParameter, sessFromParameter, sessToParameter, isRegisteredParameter, fullNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<string> sp_PromoCode(Nullable<int> iD, string pROMO_CODE, string sTART_DATE, string eND_DATE, string aPPLIED_FOR, string pROMO_DISCOUNT, Nullable<bool> sTATUS, Nullable<int> aCTION)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var pROMO_CODEParameter = pROMO_CODE != null ?
                new ObjectParameter("PROMO_CODE", pROMO_CODE) :
                new ObjectParameter("PROMO_CODE", typeof(string));
    
            var sTART_DATEParameter = sTART_DATE != null ?
                new ObjectParameter("START_DATE", sTART_DATE) :
                new ObjectParameter("START_DATE", typeof(string));
    
            var eND_DATEParameter = eND_DATE != null ?
                new ObjectParameter("END_DATE", eND_DATE) :
                new ObjectParameter("END_DATE", typeof(string));
    
            var aPPLIED_FORParameter = aPPLIED_FOR != null ?
                new ObjectParameter("APPLIED_FOR", aPPLIED_FOR) :
                new ObjectParameter("APPLIED_FOR", typeof(string));
    
            var pROMO_DISCOUNTParameter = pROMO_DISCOUNT != null ?
                new ObjectParameter("PROMO_DISCOUNT", pROMO_DISCOUNT) :
                new ObjectParameter("PROMO_DISCOUNT", typeof(string));
    
            var sTATUSParameter = sTATUS.HasValue ?
                new ObjectParameter("STATUS", sTATUS) :
                new ObjectParameter("STATUS", typeof(bool));
    
            var aCTIONParameter = aCTION.HasValue ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_PromoCode", iDParameter, pROMO_CODEParameter, sTART_DATEParameter, eND_DATEParameter, aPPLIED_FORParameter, pROMO_DISCOUNTParameter, sTATUSParameter, aCTIONParameter);
        }
    
        public virtual int sp_Refund(Nullable<int> iD, Nullable<int> cLIENT_ID, string dATE, string dESCRIPTION, Nullable<decimal> aMOUNT, string pAYMODE, string nOTES, string lAST_UPDATED, string uPDATED_BY, string aCTION)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var cLIENT_IDParameter = cLIENT_ID.HasValue ?
                new ObjectParameter("CLIENT_ID", cLIENT_ID) :
                new ObjectParameter("CLIENT_ID", typeof(int));
    
            var dATEParameter = dATE != null ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(string));
    
            var dESCRIPTIONParameter = dESCRIPTION != null ?
                new ObjectParameter("DESCRIPTION", dESCRIPTION) :
                new ObjectParameter("DESCRIPTION", typeof(string));
    
            var aMOUNTParameter = aMOUNT.HasValue ?
                new ObjectParameter("AMOUNT", aMOUNT) :
                new ObjectParameter("AMOUNT", typeof(decimal));
    
            var pAYMODEParameter = pAYMODE != null ?
                new ObjectParameter("PAYMODE", pAYMODE) :
                new ObjectParameter("PAYMODE", typeof(string));
    
            var nOTESParameter = nOTES != null ?
                new ObjectParameter("NOTES", nOTES) :
                new ObjectParameter("NOTES", typeof(string));
    
            var lAST_UPDATEDParameter = lAST_UPDATED != null ?
                new ObjectParameter("LAST_UPDATED", lAST_UPDATED) :
                new ObjectParameter("LAST_UPDATED", typeof(string));
    
            var uPDATED_BYParameter = uPDATED_BY != null ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(string));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Refund", iDParameter, cLIENT_IDParameter, dATEParameter, dESCRIPTIONParameter, aMOUNTParameter, pAYMODEParameter, nOTESParameter, lAST_UPDATEDParameter, uPDATED_BYParameter, aCTIONParameter);
        }
    
        public virtual int sp_SMTPConfig(Nullable<int> iD, string dOMAIN, string hOST, string uID, string pWD, Nullable<int> pORT, Nullable<bool> hTML, Nullable<bool> sSL, Nullable<bool> iS_DEFAULT, Nullable<bool> aCTIVE, string bR_ID, string lAST_UPDATED, string uPDATED_BY, string aCTION)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dOMAINParameter = dOMAIN != null ?
                new ObjectParameter("DOMAIN", dOMAIN) :
                new ObjectParameter("DOMAIN", typeof(string));
    
            var hOSTParameter = hOST != null ?
                new ObjectParameter("HOST", hOST) :
                new ObjectParameter("HOST", typeof(string));
    
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var pWDParameter = pWD != null ?
                new ObjectParameter("PWD", pWD) :
                new ObjectParameter("PWD", typeof(string));
    
            var pORTParameter = pORT.HasValue ?
                new ObjectParameter("PORT", pORT) :
                new ObjectParameter("PORT", typeof(int));
    
            var hTMLParameter = hTML.HasValue ?
                new ObjectParameter("HTML", hTML) :
                new ObjectParameter("HTML", typeof(bool));
    
            var sSLParameter = sSL.HasValue ?
                new ObjectParameter("SSL", sSL) :
                new ObjectParameter("SSL", typeof(bool));
    
            var iS_DEFAULTParameter = iS_DEFAULT.HasValue ?
                new ObjectParameter("IS_DEFAULT", iS_DEFAULT) :
                new ObjectParameter("IS_DEFAULT", typeof(bool));
    
            var aCTIVEParameter = aCTIVE.HasValue ?
                new ObjectParameter("ACTIVE", aCTIVE) :
                new ObjectParameter("ACTIVE", typeof(bool));
    
            var bR_IDParameter = bR_ID != null ?
                new ObjectParameter("BR_ID", bR_ID) :
                new ObjectParameter("BR_ID", typeof(string));
    
            var lAST_UPDATEDParameter = lAST_UPDATED != null ?
                new ObjectParameter("LAST_UPDATED", lAST_UPDATED) :
                new ObjectParameter("LAST_UPDATED", typeof(string));
    
            var uPDATED_BYParameter = uPDATED_BY != null ?
                new ObjectParameter("UPDATED_BY", uPDATED_BY) :
                new ObjectParameter("UPDATED_BY", typeof(string));
    
            var aCTIONParameter = aCTION != null ?
                new ObjectParameter("ACTION", aCTION) :
                new ObjectParameter("ACTION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SMTPConfig", iDParameter, dOMAINParameter, hOSTParameter, uIDParameter, pWDParameter, pORTParameter, hTMLParameter, sSLParameter, iS_DEFAULTParameter, aCTIVEParameter, bR_IDParameter, lAST_UPDATEDParameter, uPDATED_BYParameter, aCTIONParameter);
        }
    
        public virtual int SP_UpdateASPNetUsers(Nullable<int> uId, string email, string phoneNumber, string userName)
        {
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateASPNetUsers", uIdParameter, emailParameter, phoneNumberParameter, userNameParameter);
        }
    
        public virtual int SP_UpdateMobileVerificationMst(string mobileNo, string verificationCode, Nullable<bool> isRegistered, string currentDate, string sessFrom, string sessTo)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var verificationCodeParameter = verificationCode != null ?
                new ObjectParameter("VerificationCode", verificationCode) :
                new ObjectParameter("VerificationCode", typeof(string));
    
            var isRegisteredParameter = isRegistered.HasValue ?
                new ObjectParameter("IsRegistered", isRegistered) :
                new ObjectParameter("IsRegistered", typeof(bool));
    
            var currentDateParameter = currentDate != null ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(string));
    
            var sessFromParameter = sessFrom != null ?
                new ObjectParameter("SessFrom", sessFrom) :
                new ObjectParameter("SessFrom", typeof(string));
    
            var sessToParameter = sessTo != null ?
                new ObjectParameter("SessTo", sessTo) :
                new ObjectParameter("SessTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateMobileVerificationMst", mobileNoParameter, verificationCodeParameter, isRegisteredParameter, currentDateParameter, sessFromParameter, sessToParameter);
        }
    }
}
